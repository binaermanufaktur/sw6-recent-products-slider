(this.webpackJsonp=this.webpackJsonp||[]).push([["part-viewed-products"],{GhgL:function(e,t,n){var c=n("lTmW");"string"==typeof c&&(c=[[e.i,c,""]]),c.locals&&(e.exports=c.locals);(0,n("SZ7m").default)("dc995b5c",c,!0,{})},JzDi:function(e,t){Shopware.Component.register("sw-cms-el-preview-recently-viewed-product-slider",{template:"<h2>recently viewed products</h2>"})},KRhV:function(e,t){e.exports='{% block sw_cms_element_product_slider_config %}\n    <div class="sw-cms-el-config-product-slider">\n        {% block sw_cms_element_product_slider_config_tabs %}\n            <sw-tabs class="sw-cms-el-config-product-slider__tabs" defaultItem="content">\n                <template slot-scope="{ active }" >\n                    {% block sw_cms_element_product_slider_config_tab_content %}\n                        <sw-tabs-item :title="$tc(\'sw-cms.elements.configTabContent\')"\n                                      name="content"\n                                      :activeTab="active">\n                            {{ $tc(\'sw-cms.elements.configTabContent\') }}\n                        </sw-tabs-item>\n                    {% endblock %}\n                    {% block sw_cms_element_product_slider_config_tab_options %}\n                        <sw-tabs-item :title="$tc(\'sw-cms.elements.configTabSettings\')"\n                                      name="settings"\n                                      :activeTab="active">\n                            {{ $tc(\'sw-cms.elements.configTabSettings\') }}\n                        </sw-tabs-item>\n                    {% endblock %}\n                </template>\n\n                <template slot="content" slot-scope="{ active }">\n                    {% block sw_cms_element_product_slider_config_content %}\n                        <sw-container v-if="active === \'content\'" class="sw-cms-el-config-product-slider__tab-content">\n                            {% block sw_cms_element_product_slider_config_content_title %}\n                                <sw-field type="text"\n                                          :label="$tc(\'sw-cms.elements.labelProductSliderTitle\')"\n                                          :placeholder="$tc(\'sw-cms.elements.placeholderProductSliderTitle\')"\n                                          v-model="element.config.title.value">\n                                </sw-field>\n                            {% endblock %}\n\n                            {% block sw_cms_element_product_slider_config_content_products %}\n                                <sw-entity-multi-select\n                                        class="sw-cms-el-config-product-slider__products"\n                                        :label="$tc(\'sw-cms.elements.labelProductSliderSelection\')"\n                                        :placeholder="$tc(\'sw-cms.elements.placeholderProductSliderSelection\')"\n                                        v-model="productCollection"\n                                        @change="onProductsChange"\n                                        :context="productMultiSelectContext"\n                                        :criteria="productMediaFilter">\n                                    <template #result-label-property="{ item, index, labelProperty, searchTerm, getKey }">\n                                        <sw-highlight-text\n                                                :text="getKey(item,labelProperty) || getKey(item, `translated.${labelProperty}`)"\n                                                :searchTerm="searchTerm">\n                                        </sw-highlight-text>\n                                        <span class="sw-cms-el-config-product-slider__select-product-number">{{ item.productNumber }}</span>\n                                    </template>\n                                </sw-entity-multi-select>\n                            {% endblock %}\n                        </sw-container>\n                    {% endblock %}\n\n                    {% block sw_cms_element_product_slider_config_settings %}\n                        <sw-container v-if="active === \'settings\'" class="sw-cms-el-config-product-slider__tab-settings">\n\n                            {% block sw_cms_element_product_slider_config_settings_display_mode %}\n                                <sw-select-field :label="$tc(\'sw-cms.elements.labelProductDisplayMode\')"\n                                                 v-model="element.config.displayMode.value">\n                                    <option value="standard">{{ $tc(\'sw-cms.elements.labelProductDisplayModeStandard\') }}</option>\n                                    <option value="cover">{{ $tc(\'sw-cms.elements.labelProductDisplayModeCover\') }}</option>\n                                    <option value="contain">{{ $tc(\'sw-cms.elements.labelProductDisplayModeContain\') }}</option>\n                                </sw-select-field>\n                            {% endblock %}\n\n                            {% block sw_cms_element_product_slider_config_settings_vertical_align %}\n                                <sw-select-field :label="$tc(\'sw-cms.elements.labelVerticalAlign\')"\n                                                 v-model="element.config.verticalAlign.value"\n                                                 :placeholder="$tc(\'sw-cms.elements.labelVerticalAlign\')">\n                                    <option value="flex-start">{{ $tc(\'sw-cms.elements.labelVerticalAlignTop\') }}</option>\n                                    <option value="center">{{ $tc(\'sw-cms.elements.labelVerticalAlignCenter\') }}</option>\n                                    <option value="flex-end">{{ $tc(\'sw-cms.elements.labelVerticalAlignBottom\') }}</option>\n                                </sw-select-field>\n                            {% endblock %}\n\n                            {% block sw_cms_element_product_slider_config_settings_box_layout %}\n                                <sw-select-field :label="$tc(\'sw-cms.elements.labelProductLayoutType\')"\n                                                 v-model="element.config.boxLayout.value">\n                                    <option value="standard">{{ $tc(\'sw-cms.elements.labelProductLayoutTypeStandard\') }}</option>\n                                    <option value="image">{{ $tc(\'sw-cms.elements.labelProductLayoutTypeImage\') }}</option>\n                                    <option value="minimal">{{ $tc(\'sw-cms.elements.labelProductLayoutTypeMinimal\') }}</option>\n                                </sw-select-field>\n                            {% endblock %}\n\n                            {% block sw_cms_element_product_slider_config_settings_navigation %}\n                                <sw-field type="switch"\n                                          bordered\n                                          :label="$tc(\'sw-cms.elements.labelProductSliderNavigation\')"\n                                          v-model="element.config.navigation.value">\n                                </sw-field>\n                            {% endblock %}\n\n                            {% block sw_cms_element_product_slider_config_settings_rotate %}\n                                <sw-field type="switch"\n                                          bordered\n                                          :label="$tc(\'sw-cms.elements.labelProductSliderRotate\')"\n                                          v-model="element.config.rotate.value">\n                                </sw-field>\n                            {% endblock %}\n\n                            {% block sw_cms_element_product_slider_config_settings_border %}\n                                <sw-field type="switch"\n                                          bordered\n                                          :label="$tc(\'sw-cms.elements.labelProductSliderBorder\')"\n                                          v-model="element.config.border.value">\n                                </sw-field>\n                            {% endblock %}\n\n                            {% block sw_cms_element_product_slider_config_settings_min_width %}\n                                <sw-field type="text"\n                                          :label="$tc(\'sw-cms.elements.labelProductSliderMinWidth\')"\n                                          :placeholder="$tc(\'sw-cms.elements.placeholderProductSliderMinWidth\')"\n                                          v-model="element.config.elMinWidth.value">\n                                </sw-field>\n                            {% endblock %}\n                        </sw-container>\n                    {% endblock %}\n                </template>\n            </sw-tabs>\n        {% endblock %}\n    </div>\n{% endblock %}\n'},Qade:function(e,t,n){},TMlZ:function(e,t,n){var c=n("Qade");"string"==typeof c&&(c=[[e.i,c,""]]),c.locals&&(e.exports=c.locals);(0,n("SZ7m").default)("0779fe15",c,!0,{})},XARi:function(e,t,n){"use strict";n.r(t);n("TMlZ");const{Component:c}=Shopware;c.register("sw-cms-preview-recently-viewed-product-slider",{template:"<h2>recent products</h2>"}),Shopware.Service("cmsService").registerCmsBlock({name:"recently-viewed-products",label:"Display recently viewed products",category:"commerce",component:"sw-cms-block-product-slider",previewComponent:"sw-cms-preview-recently-viewed-product-slider",defaultConfig:{marginBottom:"20px",marginTop:"20px",marginLeft:"20px",marginRight:"20px",sizingMode:"boxed"},slots:{productSlider:"recently-viewed-product-slider"}});n("JzDi");var o=n("KRhV"),l=n.n(o);n("GhgL");const{Component:s,Mixin:i}=Shopware,{Criteria:r,EntityCollection:a}=Shopware.Data;s.register("sw-cms-el-config-recently-viewed-product-product-slider",{template:l.a,inject:["repositoryFactory","context"],mixins:[i.getByName("cms-element")],data:()=>({productCollection:null,viewedProductCollection:null,viewedProductsId:["c10c18a58a864a31a864c1dceaa2646d","a25fa6e2352948beb3ac9bb159b4e556"]}),computed:{productRepository(){return this.repositoryFactory.create("product")},products(){return this.element.data&&this.element.data.products&&this.element.data.products.length>0?this.element.data.products:null},productMediaFilter(){const e=new r(1,25);return e.addAssociation("cover"),e},productMultiSelectContext(){const e=Object.assign({},this.context);return e.inheritance=!0,e}},created(){this.createdComponent()},methods:{createdComponent(){this.initElementConfig("product-slider"),this.viewedProductCollection=new a("/product","product");const e=new r(1,100);if(e.addAssociation("cover"),e.setIds(this.viewedProductsId),this.productRepository.search(e,Object.assign({},this.context,{inheritance:!0})).then(e=>{this.viewedProductCollection=e}),this.$set(this.element.data,"viewed_products",this.viewedProductCollection),this.productCollection=new a("/product","product",this.context),this.element.config.products.value.length>0){const e=new r(1,100);e.addAssociation("cover"),e.setIds(this.element.config.products.value),this.productRepository.search(e,Object.assign({},this.context,{inheritance:!0})).then(e=>{this.productCollection=e})}},onProductsChange(){this.element.config.products.value=this.productCollection.getIds(),this.$set(this.element.data,"products",this.productCollection)}}});const d=Shopware.Data.Criteria,m=new d;m.addAssociation("cover"),Shopware.Service("cmsService").registerCmsElement({name:"recently-viewed-product-slider",label:"A recently viewed products slider",component:"sw-cms-el-product-slider",configComponent:"sw-cms-el-config-recently-viewed-product-product-slider",previewComponent:"sw-cms-preview-recently-viewed-product-slider",defaultConfig:{products:{source:"static",value:["c10c18a58a864a31a864c1dceaa2646d","a25fa6e2352948beb3ac9bb159b4e556"],required:!0,entity:{name:"product",criteria:m}},title:{source:"static",value:""},displayMode:{source:"static",value:"standard"},boxLayout:{source:"static",value:"standard"},navigation:{source:"static",value:!0},rotate:{source:"static",value:!1},border:{source:"static",value:!1},elMinWidth:{source:"static",value:"300px"},verticalAlign:{source:"static",value:null}},collect:function(e){const t=Object.assign({},Shopware.Context,{inheritance:!0}),n={};return Object.keys(e.config).forEach(c=>{if("mapped"===e.config[c].source)return;const o=e.config[c].entity;if(o&&e.config[c].value){const l=o.name,s={value:[...e.config[c].value],key:c,searchCriteria:o.criteria?o.criteria:new d,...o};s.searchCriteria.setIds(s.value),s.context=t,n[`entity-${l}`]=s}}),n}})},lTmW:function(e,t,n){}},[["XARi","runtime","vendors-node"]]]);